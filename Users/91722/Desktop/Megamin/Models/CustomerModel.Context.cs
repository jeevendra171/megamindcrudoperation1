//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MINDCRUD1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MegaMindEntities2 : DbContext
    {
        public MegaMindEntities2()
            : base("name=MegaMindEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_UserInfo> tbl_UserInfo { get; set; }
    
        public virtual int sp_DeleteUserInfos(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUserInfos", userIdParameter);
        }
    
        public virtual int sp_InsertUsers(string name, string email, string phoneNo, string address, string state, string city, Nullable<bool> agree)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var agreeParameter = agree.HasValue ?
                new ObjectParameter("Agree", agree) :
                new ObjectParameter("Agree", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUsers", nameParameter, emailParameter, phoneNoParameter, addressParameter, stateParameter, cityParameter, agreeParameter);
        }
    
        public virtual int sp_UpdateUserInfos(Nullable<int> userId, string name, string email, string phoneNo, string address, string state, string city, Nullable<bool> agree)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var agreeParameter = agree.HasValue ?
                new ObjectParameter("Agree", agree) :
                new ObjectParameter("Agree", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserInfos", userIdParameter, nameParameter, emailParameter, phoneNoParameter, addressParameter, stateParameter, cityParameter, agreeParameter);
        }
    
        public virtual ObjectResult<sp_SelectUserInfos_Result> sp_SelectUserInfos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectUserInfos_Result>("sp_SelectUserInfos");
        }
    }
}
